{"version":3,"file":"static/js/765.b5f35387.chunk.js","mappings":"8PAgBA,EAdeA,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,SAAS,wBACTC,IAAI,EAAG,0CACPC,IAAI,GAAI,0CACXC,MAAON,EAAAA,KAAaG,SAAS,qBAAqBG,MAAM,oBACxDC,SAAUP,EAAAA,KAEPG,SAAS,wBACTC,IAAI,EAAG,0CACPC,IAAI,GAAI,4C,mBCVAG,GAAWC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uFAMRE,GAAQF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,gOAaLI,EAAQJ,EAAAA,GAAAA,MAAH,0RAcLK,EAAQL,EAAAA,GAAAA,IAAH,2JASLM,EAASN,EAAAA,GAAAA,OAAH,iY,SC9BNO,EAAe,WAC1B,IAAMC,GAASC,EAAAA,EAAAA,MACTC,GAAUD,EAAAA,EAAAA,MACVE,GAAaF,EAAAA,EAAAA,MAEbG,GAAWC,EAAAA,EAAAA,MAOjB,OACE,0BACE,SAAC,KAAD,CACEC,cAAe,CAAErB,KAAM,GAAII,MAAO,GAAIC,SAAU,IAChDiB,iBAAkBC,EAClBC,SAVe,SAAC,EAAD,GAA+C,IAA5CxB,EAA2C,EAA3CA,KAAMI,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAcoB,EAAgB,EAAhBA,UACjDN,GAASO,EAAAA,EAAAA,IAAS,CAAE1B,KAAAA,EAAMI,MAAAA,EAAOC,SAAAA,KACjCoB,GACD,EAIG,UAKE,UAACnB,EAAD,CAAUqB,aAAa,MAAvB,WACE,UAAChB,EAAD,CAAOiB,QAASb,EAAhB,sBAEE,SAACN,EAAD,CAAOoB,KAAK,OAAO7B,KAAK,OAAO8B,GAAIf,QAErC,SAACH,EAAD,WACE,SAAC,KAAD,CAAcZ,KAAK,OAAO+B,WAAW,YAEvC,UAACpB,EAAD,CAAOiB,QAASX,EAAhB,mBAEE,SAACR,EAAD,CAAOoB,KAAK,QAAQ7B,KAAK,QAAQ8B,GAAIb,QAEvC,SAACL,EAAD,WACE,SAAC,KAAD,CAAcZ,KAAK,QAAQ+B,WAAW,YAExC,UAACpB,EAAD,CAAOiB,QAASV,EAAhB,sBAEE,SAACT,EAAD,CAAOoB,KAAK,WAAW7B,KAAK,WAAW8B,GAAIZ,QAE7C,SAACN,EAAD,WACE,SAAC,KAAD,CAAcZ,KAAK,WAAW+B,WAAW,YAE3C,SAAClB,EAAD,CAAQgB,KAAK,SAAb,4BAKT,E,SCzDc,SAASG,IACtB,OACE,UAAC,IAAD,YACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAACnB,EAAD,MAGL,C","sources":["validation/validationRegisterForm.js","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .required('Username is required')\n    .min(6, 'Username must be at least 6 characters')\n    .max(20, 'Username must not exceed 20 characters'),\n  email: yup.string().required('Email is required').email('Email is invalid'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(6, 'Password must be at least 6 characters')\n    .max(40, 'Password must not exceed 40 characters'),\n});\n\nexport default schema;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormWrap = styled(Form)`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled(Field)`\n  box-sizing: border-box;\n  border: 2px solid #00ca90;\n  border-radius: 50px;\n  outline: none;\n  background-color: #f2f2f2;\n  &:hover,\n  &:focus {\n    border-color: red;\n  }\n  padding: 5px;\n`;\n\nexport const Label = styled.label`\n  box-sizing: border-box;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  align-items: center;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.17;\n  letter-spacing: 0.01em;\n  color: #4e34b5;\n  margin-top: 10px;\n`;\n\nexport const Error = styled.div`\n  color: #df4f06;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 1.6;\n  letter-spacing: 0.06em;\n  margin-left: 120px;\n`;\n\nexport const Button = styled.button`\n  margin-top: 30px;\n  padding: 5px 20px 5px 20px;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 19px;\n  color: #ffffff;\n  letter-spacing: 0.06em;\n  background-color: #53cda6;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 50px;\n  &:hover,\n  &:focus {\n    background-color: df4f06;\n  }\n  cursor: pointer;\n  width: 110px;\n`;\n","import { Formik } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { register } from 'redux/auth/operations';\nimport { useDispatch } from 'react-redux';\nimport schema from 'validation/validationRegisterForm';\nimport { ErrorMessage } from 'formik';\n\nimport {\n  FormWrap,\n  Input,\n  Label,\n  Button,\n  Error,\n} from 'components/RegisterForm/RegisterForm.styled';\n\nexport const RegisterForm = () => {\n  const nameId = nanoid();\n  const emailId = nanoid();\n  const passwordId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, email, password }, { resetForm }) => {\n    dispatch(register({ name, email, password }));\n    resetForm();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <FormWrap autoComplete=\"off\">\n          <Label htmlFor={nameId}>\n            Username\n            <Input type=\"text\" name=\"name\" id={nameId} />\n          </Label>\n          <Error>\n            <ErrorMessage name=\"name\" compononet=\"span\" />\n          </Error>\n          <Label htmlFor={emailId}>\n            Email\n            <Input type=\"email\" name=\"email\" id={emailId} />\n          </Label>\n          <Error>\n            <ErrorMessage name=\"email\" compononet=\"span\" />\n          </Error>\n          <Label htmlFor={passwordId}>\n            Password\n            <Input type=\"password\" name=\"password\" id={passwordId} />\n          </Label>\n          <Error>\n            <ErrorMessage name=\"password\" compononet=\"span\" />\n          </Error>\n          <Button type=\"submit\">Register</Button>\n        </FormWrap>\n      </Formik>\n    </div>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Container } from 'components/UI/Container/Container.styled';\n\nexport default function Register() {\n  return (\n    <Container>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </Container>\n  );\n}\n"],"names":["yup","shape","name","required","min","max","email","password","FormWrap","styled","Form","Input","Field","Label","Error","Button","RegisterForm","nameId","nanoid","emailId","passwordId","dispatch","useDispatch","initialValues","validationSchema","schema","onSubmit","resetForm","register","autoComplete","htmlFor","type","id","compononet","Register","Helmet"],"sourceRoot":""}