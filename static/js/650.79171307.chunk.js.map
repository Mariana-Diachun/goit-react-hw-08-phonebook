{"version":3,"file":"static/js/650.79171307.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","validation/validation.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/UI/Loader/Loader.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n","import * as yup from 'yup';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string('Name may contain only letters, apostrophe, dash and spaces.')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'For example Jacob Mercer!'\n    )\n    .min(2, 'Name is too short!')\n    .max(30, 'Name is too long!')\n    .required('Please, enter your name!'),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits'\n    )\n    .min(9, 'Please use this format 000-00-00')\n    .required('Please, enter your phone number!'),\n});\n\nexport default schema;\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormWrap = styled(Form)`\n  border: 1px solid black;\n  padding: 30px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled(Field)`\n  box-sizing: border-box;\n  width: 200px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  outline: none;\n  &:hover,\n  &:focus {\n    border-color: red;\n  }\n  padding: 2px;\n`;\n\nexport const Label = styled.label`\n  box-sizing: border-box;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  align-items: center;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 1.17;\n  letter-spacing: 0.01em;\n  margin-top: 10px;\n`;\n\nexport const Alert = styled(ErrorMessage)`\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  margin-top: 30px;\n  padding: 5px;\n  font-weight: 500;\n  font-size: 10px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  background-color: rgba(33, 33, 33, 0.2);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  &:hover,\n  &:focus {\n    background-color: red;\n  }\n  cursor: pointer;\n  width: 100px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport Notiflix from 'notiflix';\n\nimport schema from 'validation/validation';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport {\n  Input,\n  FormWrap,\n  Label,\n  Button,\n  Alert,\n} from 'components/ContactForm/ContactForm.styled';\n\nexport const ContactForm = () => {\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const hasContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (hasContact)\n      return Notiflix.Notify.failure(`${name} is already in contacts`);\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <section>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <FormWrap autoComplete=\"off\">\n          <Label htmlFor={nameId}>\n            Name\n            <Input type=\"text\" name=\"name\" id={nameId} />\n          </Label>\n          <Alert name=\"name\" compononet=\"span\" />\n          <Label htmlFor={numberId}>\n            Number\n            <Input type=\"tel\" name=\"number\" id={numberId} />\n          </Label>\n          <Alert name=\"number\" compononet=\"span\" />\n          <Button type=\"submit\">Add contact</Button>\n        </FormWrap>\n      </Formik>\n    </section>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  margin-top: 20px;\n`;\n\nexport const Label = styled.label`\n  margin-right: 30px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const InputSearch = styled.input`\n  box-sizing: border-box;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  outline: none;\n  &:hover,\n  &:focus {\n    border-color: red;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nimport { searchByName } from 'redux/contacts/slices/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nimport { Box, Label, InputSearch } from 'components/Filter/Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const inputID = nanoid();\n\n  return (\n    <Box>\n      <Label htmlFor={inputID}>\n        Find contacts by name:\n        <InputSearch\n          id={inputID}\n          type=\"text\"\n          value={filter}\n          name=\"filter\"\n          onChange={e => dispatch(searchByName(e.target.value))}\n        />\n      </Label>\n    </Box>\n  );\n};\n","import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <ThreeDots\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"#4fa94d\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{}}\n      wrapperClassName=\"\"\n      visible={true}\n    />\n  );\n};\n","import styled from 'styled-components';\n\nexport const Contact = styled.div`\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Button = styled.div`\n  cursor: pointer;\n  text-align: center;\n  width: 50px;\n  font-weight: 500;\n  font-size: 10px;\n  line-height: 1.88;\n  letter-spacing: 0.06em;\n  background-color: rgba(33, 33, 33, 0.2);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  &:hover,\n  &:focus {\n    background-color: red;\n  }\n  margin-left: 30px;\n  background-color: rgba(33, 33, 33, 0.2);\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { Contact, Button } from 'components/ContactItem/ContactItem.styled';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Contact id={id}>\n      {name} : {number}\n      <Contact />\n      <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </Button>\n    </Contact>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 20px;\n  list-style-type: square;\n`;\n","import { useSelector } from 'react-redux';\n\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\n\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { List } from 'components/ContactList/ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  if (filteredContacts) {\n    return (\n      <List>\n        {filteredContacts.map(contact => {\n          return <ContactItem key={contact.id} {...contact} />;\n        })}\n      </List>\n    );\n  }\n};\n","import styled from 'styled-components';\n\nexport const MainTitle = styled.h1`\n  font-weight: 700;\n  font-size: 26px;\n  line-height: 1.15;\n  text-align: center;\n  letter-spacing: 0.03em;\n  color: rgb(21, 18, 18);\n  margin-bottom: 20px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/UI/Loader/Loader';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { MainTitle } from 'pages/Contacts/Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <MainTitle>Phonebook</MainTitle>\n      </Helmet>\n      <ContactForm />\n      {isLoading && !error && <Loader />}\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","selectError","error","selectFilter","filter","yup","shape","name","matches","min","max","required","number","FormWrap","styled","Form","Input","Field","Label","Alert","ErrorMessage","Button","ContactForm","nameId","nanoid","numberId","dispatch","useDispatch","useSelector","initialValues","validationSchema","schema","onSubmit","resetForm","find","contact","toLowerCase","Notiflix","addContact","autoComplete","htmlFor","type","id","compononet","Box","InputSearch","Filter","inputID","value","onChange","e","searchByName","target","Loader","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","Contact","ContactItem","onClick","deleteContact","List","ContactList","filteredContacts","includes","map","MainTitle","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}